// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// MODELS
model Company {
  id                  Int             @id @default(autoincrement())
  name                String
  logo                String?
  max_warehouse_count Int             @default(1)
  // --
  status              Status          @default(ACTIVE)
  createdAt           DateTime        @default(now())
  updatedAt           DateTime        @updatedAt
  // --
  users               User[]
  warehouses          Warehouse[]
  suppliers           Supplier[]
  stocks              Stock[]
  stock_carts         StockCart[]
  stock_categories    StockCategory[]
  customers           Customer[]
  currencies          Currency[]
  //

  @@map("companies")
}

model User {
  id         Int      @id @default(autoincrement())
  username   String   @unique
  password   String
  name       String
  surname    String
  admin      Boolean  @default(false)
  // --
  status     Status   @default(ACTIVE)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  //
  company_id Int
  company    Company  @relation(fields: [company_id], references: [id])

  @@map("users")
}

model Warehouse {
  id                      Int             @id @default(autoincrement())
  code                    String          @db.Char(6)
  name                    String
  main_currency_symbol    String          @db.Char(3)
  main_currency_name      String
  responsible_person_name String?
  phone                   String?
  address                 String?
  description             String?
  // --
  status                  Status          @default(ACTIVE)
  createdAt               DateTime        @default(now())
  updatedAt               DateTime        @updatedAt
  // --
  company_id              Int
  company                 Company         @relation(fields: [company_id], references: [id])
  // --
  stock_categories        StockCategory[]
  stocks                  Stock[]
  stock_carts             StockCart[]
  customers               Customer[]
  currencies              Currency[]
  suppliers               Supplier[]

  @@map("warehouses")
}

model StockCart {
  id             Int           @id @default(autoincrement())
  code           String        @db.Char(6)
  name           String
  barcode        String
  kdv            Float
  supply_price   Float
  sell_price     Float
  description    String?
  unit_type      UnitTypes
  // --
  stocks         Stock[]
  // --
  company_id     Int
  company        Company       @relation(fields: [company_id], references: [id])
  warehouse_id   Int
  warehouse      Warehouse     @relation(fields: [warehouse_id], references: [id])
  supplier_id    Int
  supplier       Supplier      @relation(fields: [supplier_id], references: [id])
  stock_brand_id Int
  stock_brand    StockCategory @relation("StockCategory_Brand", fields: [stock_brand_id], references: [id])
  stock_group_id Int
  stock_group    StockCategory @relation("StockCategory_Group", fields: [stock_group_id], references: [id])
  stock_model_id Int
  stock_model    StockCategory @relation("StockCategory_Model", fields: [stock_model_id], references: [id])
  // --
  status         Status        @default(ACTIVE)
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  @@map("stock_carts")
}

model StockCategory {
  id                  Int                @id @default(autoincrement())
  code                String             @db.Char(6)
  name                String
  stock_category_type StockCategoryTypes
  //--
  stock_brand_carts   StockCart[]        @relation("StockCategory_Brand")
  stock_model_carts   StockCart[]        @relation("StockCategory_Model")
  stock_group_carts   StockCart[]        @relation("StockCategory_Group")
  // --
  status              Status             @default(ACTIVE)
  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @updatedAt
  // --
  company_id          Int
  company             Company            @relation(fields: [company_id], references: [id])
  warehouse_id        Int
  warehouse           Warehouse          @relation(fields: [warehouse_id], references: [id])

  @@map("stock_categories")
}

model Supplier {
  id           Int         @id @default(autoincrement())
  code         String      @db.Char(6)
  name         String
  phone        String?
  address      String?
  description  String?
  // --
  status       Status      @default(ACTIVE)
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  //
  stock_carts  StockCart[]
  //
  company_id   Int
  company      Company     @relation(fields: [company_id], references: [id])
  warehouse_id Int
  warehouse    Warehouse   @relation(fields: [warehouse_id], references: [id])

  @@map("suppliers")
}

model Stock {
  id            Int         @id @default(autoincrement())
  quantity      Float       @default(0)
  price         Float?
  date          DateTime    @default(now())
  description   String?
  stock_type    StockTypes?
  data          Json?
  // --
  company_id    Int
  company       Company     @relation(fields: [company_id], references: [id])
  warehouse_id  Int
  warehouse     Warehouse   @relation(fields: [warehouse_id], references: [id])
  stock_cart_id Int
  stock_cart    StockCart   @relation(fields: [stock_cart_id], references: [id])
  customer_id   Int?
  customer      Customer?   @relation(fields: [customer_id], references: [id])
  // --
  status        Status      @default(ACTIVE)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  @@map("stocks")
}

model Customer {
  id           Int       @id @default(autoincrement())
  code         String    @db.Char(6)
  name         String
  phone        String?
  address      String?
  description  String?
  // --
  status       Status    @default(ACTIVE)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  // --
  company_id   Int
  company      Company   @relation(fields: [company_id], references: [id])
  warehouse_id Int
  warehouse    Warehouse @relation(fields: [warehouse_id], references: [id])
  // --
  stocks       Stock[]

  @@map("customers")
}

model Currency {
  id           Int       @id @default(autoincrement())
  symbol       String    @db.Char(3)
  name         String
  value        Float     @default(1)
  // --
  status       Status    @default(ACTIVE)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  //--
  company_id   Int
  company      Company   @relation(fields: [company_id], references: [id])
  warehouse_id Int
  warehouse    Warehouse @relation(fields: [warehouse_id], references: [id])
  //--

  @@map("currencies")
}

// ENUMS
enum Status {
  ACTIVE
  PASSIVE
  DELETED
}

enum StockTypes {
  SUPPLY
  RETURN
  SELL
  TRASH
}

enum StockCategoryTypes {
  BRAND
  MODEL
  GROUP
}

enum UnitTypes {
  PIECE
  KILOGRAM
  METER
  LITER
}
