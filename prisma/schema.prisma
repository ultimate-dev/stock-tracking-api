// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Company {
  id              Int             @id @default(autoincrement())
  name            String
  logo            String?
  // --
  status          Status          @default(ACTIVE)
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  // --
  users           User[]
  warehouse       Warehouse[]
  suppliers       Supplier[]
  stocks          Stock[]
  stockCarts      StockCart[]
  stockCategories StockCategory[]

  @@map("companies")
}

model User {
  id         Int      @id @default(autoincrement())
  username   String   @unique
  password   String
  name       String
  surname    String
  // --
  status     Status   @default(ACTIVE)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  //
  company_id Int
  company    Company  @relation(fields: [company_id], references: [id])

  @@map("users")
}

model Warehouse {
  id                      Int             @id @default(autoincrement())
  code                    String          @unique @db.Char(6)
  name                    String
  responsible_person_name String?
  phone                   String?
  address                 String?
  description             String?
  // --
  status                  Status          @default(ACTIVE)
  createdAt               DateTime        @default(now())
  updatedAt               DateTime        @updatedAt
  // --
  company_id              Int
  company                 Company         @relation(fields: [company_id], references: [id])
  // --
  stock_categories        StockCategory[]
  stocks                  Stock[]
  stock_carts             StockCart[]

  @@map("warehouses")
}

model Supplier {
  id          Int     @id @default(autoincrement())
  code        String  @unique @db.Char(6)
  name        String
  phone       String?
  description String?

  // --
  status      Status      @default(ACTIVE)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  //
  stock_carts StockCart[]
  //
  company_id  Int
  company     Company     @relation(fields: [company_id], references: [id])

  @@map("suppliers")
}

model Stock {
  id                Int               @id @default(autoincrement())
  quantity          Float             @default(0)
  date              DateTime          @default(now())
  description       String?
  stock_input_type  StockInputTypes?
  stock_output_type StockOutputTypes?
  // --
  company_id        Int
  company           Company           @relation(fields: [company_id], references: [id])
  warehouse_id      Int
  warehouse         Warehouse         @relation(fields: [warehouse_id], references: [id])
  stock_cart_id     Int
  stock_cart        StockCart         @relation(fields: [stock_cart_id], references: [id])

  // --
  status    Status   @default(ACTIVE)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("stocks")
}

model StockCart {
  id             Int           @id @default(autoincrement())
  code           String        @unique @db.Char(6)
  name           String
  barcode        String
  kdv            Int?
  supply_price   Float?
  sell_price     Float?
  description    String?
  unit_type      UnitTypes
  // --
  stocks         Stock[]
  // --
  company_id     Int
  company        Company       @relation(fields: [company_id], references: [id])
  warehouse_id   Int
  warehouse      Warehouse     @relation(fields: [warehouse_id], references: [id])
  supplier_id    Int
  supplier       Supplier      @relation(fields: [supplier_id], references: [id])
  stock_brand_id Int
  stock_brand    StockCategory @relation("StockCategory_Brand", fields: [stock_brand_id], references: [id])
  stock_group_id Int
  stock_group    StockCategory @relation("StockCategory_Group", fields: [stock_group_id], references: [id])
  stock_model_id Int
  stock_model    StockCategory @relation("StockCategory_Model", fields: [stock_model_id], references: [id])

  // --
  status    Status   @default(ACTIVE)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("stock_carts")
}

model StockCategory {
  id                  Int                @id @default(autoincrement())
  code                String             @unique @db.Char(6)
  name                String
  stock_category_type StockCategoryTypes
  //--
  stock_brand_carts   StockCart[]        @relation("StockCategory_Brand")
  stock_model_carts   StockCart[]        @relation("StockCategory_Model")
  stock_group_carts   StockCart[]        @relation("StockCategory_Group")
  // --
  status              Status             @default(ACTIVE)
  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @updatedAt
  // --
  company_id          Int
  company             Company            @relation(fields: [company_id], references: [id])
  warehouse_id        Int
  warehouse           Warehouse          @relation(fields: [warehouse_id], references: [id])

  @@map("stock_categories")
}

enum Status {
  ACTIVE
  PASSIVE
  DELETED
}

enum StockInputTypes {
  SUPPLY
  RETURN
}

enum StockOutputTypes {
  SELL
  TRASH
}

enum StockCategoryTypes {
  BRAND
  MODEL
  GROUP
}

enum UnitTypes {
  PIECE
  KILOGRAM
  METER
  LITER
}
